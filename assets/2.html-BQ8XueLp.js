import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,d as a}from"./app-BMjEBszc.js";const l="/my-blog/images/20240329165202.png",e="/my-blog/images/20240329165546.png",t="/my-blog/images/20240329171517.png",p={},h=a('<h1 id="编译原理第二次实验" tabindex="-1"><a class="header-anchor" href="#编译原理第二次实验"><span>编译原理第二次实验</span></a></h1><h2 id="一、实验目的" tabindex="-1"><a class="header-anchor" href="#一、实验目的"><span>一、实验目的</span></a></h2><p>掌握词法分析器的构造原理，理解单词的类别和识别方法，掌握手工编程或 LEX 编程方法之一。</p><h2 id="二、实验内容" tabindex="-1"><a class="header-anchor" href="#二、实验内容"><span>二、实验内容</span></a></h2><p>编写一个词法分析器，能够将输入的源程序转换为单词序列输出。</p><h2 id="三、实验要求" tabindex="-1"><a class="header-anchor" href="#三、实验要求"><span>三、实验要求</span></a></h2><h3 id="源语言定义" tabindex="-1"><a class="header-anchor" href="#源语言定义"><span>源语言定义</span></a></h3><p>（1）该语言的关键字：<code>if while do break real true false int char bool float </code>(其中，<code>int、char、bool、float</code>在产生式中为<code>basic</code>) 所有的关键字都是保留字，并且必须是小写。 （2）<strong>id</strong>和<strong>num</strong>的正则表达式定义； （3）专用符号：<code>+ - * / &lt; &lt;= &gt; &gt;= == != = ; , ( ) [ ] { } /* */ </code> （4）空格由空白、换行符和制表符组成。空格通常被忽略，除了它必 须分开ID、NUM关键字。 （5）程序书写格式自由：一行可以有多个语句，一个语句也可以有多 行，单词之间可以插入任意空格。 （6）考虑注释。注释由<code>/*</code>和<code>*/</code>包含。注释可以放在任何空白出现的位置， 且可以超过一行。注释不能嵌套。</p><h3 id="实现词法分析器的注意要点" tabindex="-1"><a class="header-anchor" href="#实现词法分析器的注意要点"><span>实现词法分析器的注意要点：</span></a></h3><p>（1） 关键字和标识符名的区别； （2） 数字的转换处理； （3） “&gt;=”和“&gt;”这类单词的处理；</p><h2 id="四、实验过程" tabindex="-1"><a class="header-anchor" href="#四、实验过程"><span>四、实验过程</span></a></h2><h3 id="_1-开发方法" tabindex="-1"><a class="header-anchor" href="#_1-开发方法"><span>1. 开发方法</span></a></h3><h4 id="_1-1-实验准备" tabindex="-1"><a class="header-anchor" href="#_1-1-实验准备"><span>1.1 实验准备</span></a></h4><ul><li>安装<strong>Flex</strong>和<strong>MinGW-W64</strong>，并讲其安装目录的bin子目录写入环境变量<img src="'+l+'" alt="" loading="lazy"></li><li>网上搜索<strong>LEX</strong>的书写规则，快速入门</li><li>阅读实验二的示例代码，并试运行查看结果<img src="'+e+`" alt="" loading="lazy"></li></ul><h4 id="_1-2-编写词法分析器" tabindex="-1"><a class="header-anchor" href="#_1-2-编写词法分析器"><span>1.2 编写词法分析器</span></a></h4><h5 id="_1-2-1-编写正则表达式" tabindex="-1"><a class="header-anchor" href="#_1-2-1-编写正则表达式"><span>1.2.1 编写正则表达式</span></a></h5><div class="language-lex line-numbers-mode" data-highlighter="shiki" data-ext="lex" data-title="lex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>delim		[ \\t\\n]</span></span>
<span class="line"><span>letter		[A-Za-z]</span></span>
<span class="line"><span>digit		[0-9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>comment 	(\\/\\/([^\\n])+)|(\\/\\*([^\\*])*\\*([\\*]|[^\\*\\/]([^\\*])*[\\*])*\\/)</span></span>
<span class="line"><span>ws 			{delim}+</span></span>
<span class="line"><span></span></span>
<span class="line"><span>id 			({letter}|_)({letter}|_|{digit})*</span></span>
<span class="line"><span>number  	{digit}+(\\.{digit}+)?(E[+-]?{digit}+)?</span></span>
<span class="line"><span>string		\\&quot;[^\\&quot;\\n]*\\&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>keyword		if|while|do|break|real|true|false|int|char|bool|float</span></span>
<span class="line"><span>bracket		\\{|\\}|\\(|\\)|&quot;[&quot;|&quot;]&quot;</span></span>
<span class="line"><span>semicolon	&quot;;&quot;</span></span>
<span class="line"><span>op			&lt;|&lt;=|!=|=|==|&lt;&gt;|&gt;|&gt;=|%|\\+|-|\\*|\\/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将会用到的正则表达式写好并命名定义，方便分析与使用</li><li>这里将单行注释与多行注释写入同一正则表达式中</li><li>其他的正则表达式分别用来匹配<code>ID</code>、<code>NUM</code>、字符串、关键字、操作符、分号、各种括号等</li></ul><h5 id="_1-2-2-编写匹配处理" tabindex="-1"><a class="header-anchor" href="#_1-2-2-编写匹配处理"><span>1.2.2 编写匹配处理</span></a></h5><div class="language-lex line-numbers-mode" data-highlighter="shiki" data-ext="lex" data-title="lex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{ws}|{comment}	{;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{string}    {printf(&quot;(string, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{keyword}|{bracket}|{semicolon}|{op}	{printf(&quot;%s,\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{number}	{printf(&quot;(num, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span>{id}		{printf(&quot;(id, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;,&quot;			{printf(&quot;%s\\n&quot;, yytext);}</span></span>
<span class="line"><span>.           {printf(&quot;Unknown : %s\\n&quot;,yytext);}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于实验要求和示例都未指明对注释应如何处理，此处对其的处理是不做处理</li><li>对于ID，会打印(id, %s)，NUM和字符串也是类似</li><li>其他的如关键字等则是打印原字符串</li></ul><h5 id="_1-2-3-编写主函数" tabindex="-1"><a class="header-anchor" href="#_1-2-3-编写主函数"><span>1.2.3 编写主函数</span></a></h5><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   	const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">input_filename </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;input&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (argc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        	input_filename </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    	}     </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	yyin </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(input_filename, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    	yylex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		fclose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(yyin);  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> yywrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此处是模仿示例一中的读取文件，方便调试</li></ul><h3 id="_2-测试运行结果" tabindex="-1"><a class="header-anchor" href="#_2-测试运行结果"><span>2. 测试运行结果</span></a></h3><h4 id="_2-1-编写f-bat" tabindex="-1"><a class="header-anchor" href="#_2-1-编写f-bat"><span>2.1 编写<code>F.bat</code></span></a></h4><ul><li>为方便编译，可将编译所需命令行写入<strong>bat</strong>文件中</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filename=%1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %filename%.l</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lex.yy.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-测试一" tabindex="-1"><a class="header-anchor" href="#_2-2-测试一"><span>2.2 测试一</span></a></h4><ul><li>测试文件内容为：</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> str </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">	/* </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">	这是一段注释；</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">	*/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,str);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行结果如下：<img src="`+t+`" alt="" loading="lazy"></li></ul><h4 id="_2-3-测试二" tabindex="-1"><a class="header-anchor" href="#_2-3-测试二"><span>2.3 测试二</span></a></h4><ul><li>测试文件内容为：</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] a; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v); </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v); </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j]; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行结果如下：![[Pasted image 20240329171830.png]]![[Pasted image 20240329171910.png]]</li></ul><h3 id="_3-遇到的问题与解决" tabindex="-1"><a class="header-anchor" href="#_3-遇到的问题与解决"><span>3. 遇到的问题与解决</span></a></h3><blockquote><p>[! question] Q1：之前没接触过LEX，对其不熟悉 A1: 在浏览器上搜索LEX的快速入门教程，了解了LEX文件的代码结构和基本规则，以及如何配合MinGW编译运行其生成的代码，由于LEX基于正则表达式和C语言，故很快便掌握了</p></blockquote><blockquote><p>[! question] Q2：如何分别关键字和标识符名 A2: 将对关键字的识别处理写在标识符处理的前面，这样对关键字的识别优先级更高，避免了将关键字当成标识符</p></blockquote><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2><ul><li><em><strong>myprogram.l</strong></em>完整代码</li></ul><div class="language-lex line-numbers-mode" data-highlighter="shiki" data-ext="lex" data-title="lex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>%{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span>delim		[ \\t\\n]</span></span>
<span class="line"><span>letter		[A-Za-z]</span></span>
<span class="line"><span>digit		[0-9]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>comment 	(\\/\\/([^\\n])+)|(\\/\\*([^\\*])*\\*([\\*]|[^\\*\\/]([^\\*])*[\\*])*\\/)</span></span>
<span class="line"><span>ws 			{delim}+</span></span>
<span class="line"><span></span></span>
<span class="line"><span>id 			({letter}|_)({letter}|_|{digit})*</span></span>
<span class="line"><span>number  	{digit}+(\\.{digit}+)?(E[+-]?{digit}+)?</span></span>
<span class="line"><span>string		\\&quot;[^\\&quot;\\n]*\\&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>keyword		if|while|do|break|real|true|false|int|char|bool|float</span></span>
<span class="line"><span>bracket		\\{|\\}|\\(|\\)|&quot;[&quot;|&quot;]&quot;</span></span>
<span class="line"><span>semicolon	&quot;;&quot;</span></span>
<span class="line"><span>op			&lt;|&lt;=|!=|=|==|&lt;&gt;|&gt;|&gt;=|%|\\+|-|\\*|\\/</span></span>
<span class="line"><span>%%</span></span>
<span class="line"><span>{ws}|{comment}	{;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{string}    {printf(&quot;(string, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{keyword}|{bracket}|{semicolon}|{op}	{printf(&quot;%s,\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{number}	{printf(&quot;(num, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span>{id}		{printf(&quot;(id, %s)\\n&quot;, yytext);}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;,&quot;			{printf(&quot;%s\\n&quot;, yytext);}</span></span>
<span class="line"><span>.           {printf(&quot;Unknown : %s\\n&quot;,yytext);}</span></span>
<span class="line"><span>%%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main(int argc, char *argv[])</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   	const char *input_filename = &quot;input&quot;;  </span></span>
<span class="line"><span>	if (argc == 2){   </span></span>
<span class="line"><span>        	input_filename = argv[1];  </span></span>
<span class="line"><span>    	}     </span></span>
<span class="line"><span>	yyin = fopen(input_filename, &quot;r&quot;);  </span></span>
<span class="line"><span>    	yylex();  </span></span>
<span class="line"><span>		fclose(yyin);  </span></span>
<span class="line"><span>    	return 0;  </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int yywrap()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	return 1;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),d=[h];function r(k,c){return n(),i("div",null,d)}const u=s(p,[["render",r],["__file","2.html.vue"]]),v=JSON.parse('{"path":"/reports/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.html","title":"编译原理第二次实验","lang":"zh-CN","frontmatter":{"title":"编译原理第二次实验","cover":"/assets/images/cover1.jpg","icon":"paper-plane","order":2,"author":"Mr.Liu","date":"2024-03-29T00:00:00.000Z","category":["实验报告"],"tag":["编译原理","实验报告"],"sticky":false,"star":false,"footer":"箱根山岳险天下","copyright":"无版权","description":"编译原理第二次实验 一、实验目的 掌握词法分析器的构造原理，理解单词的类别和识别方法，掌握手工编程或 LEX 编程方法之一。 二、实验内容 编写一个词法分析器，能够将输入的源程序转换为单词序列输出。 三、实验要求 源语言定义 （1）该语言的关键字：if while do break real true false int char bool float...","head":[["meta",{"property":"og:url","content":"https://fancxx.github.io/my-blog/reports/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.html"}],["meta",{"property":"og:site_name","content":"Funcxx"}],["meta",{"property":"og:title","content":"编译原理第二次实验"}],["meta",{"property":"og:description","content":"编译原理第二次实验 一、实验目的 掌握词法分析器的构造原理，理解单词的类别和识别方法，掌握手工编程或 LEX 编程方法之一。 二、实验内容 编写一个词法分析器，能够将输入的源程序转换为单词序列输出。 三、实验要求 源语言定义 （1）该语言的关键字：if while do break real true false int char bool float..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fancxx.github.io/my-blog/assets/images/cover1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T05:45:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://fancxx.github.io/my-blog/assets/images/cover1.jpg"}],["meta",{"name":"twitter:image:alt","content":"编译原理第二次实验"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"编译原理"}],["meta",{"property":"article:tag","content":"实验报告"}],["meta",{"property":"article:published_time","content":"2024-03-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-03T05:45:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译原理第二次实验\\",\\"image\\":[\\"https://fancxx.github.io/my-blog/images/20240329165202.png\\",\\"https://fancxx.github.io/my-blog/images/20240329165546.png\\",\\"https://fancxx.github.io/my-blog/images/20240329171517.png\\"],\\"datePublished\\":\\"2024-03-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-03T05:45:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\"}]}"]]},"headers":[{"level":2,"title":"一、实验目的","slug":"一、实验目的","link":"#一、实验目的","children":[]},{"level":2,"title":"二、实验内容","slug":"二、实验内容","link":"#二、实验内容","children":[]},{"level":2,"title":"三、实验要求","slug":"三、实验要求","link":"#三、实验要求","children":[{"level":3,"title":"源语言定义","slug":"源语言定义","link":"#源语言定义","children":[]},{"level":3,"title":"实现词法分析器的注意要点：","slug":"实现词法分析器的注意要点","link":"#实现词法分析器的注意要点","children":[]}]},{"level":2,"title":"四、实验过程","slug":"四、实验过程","link":"#四、实验过程","children":[{"level":3,"title":"1. 开发方法","slug":"_1-开发方法","link":"#_1-开发方法","children":[]},{"level":3,"title":"2. 测试运行结果","slug":"_2-测试运行结果","link":"#_2-测试运行结果","children":[]},{"level":3,"title":"3. 遇到的问题与解决","slug":"_3-遇到的问题与解决","link":"#_3-遇到的问题与解决","children":[]}]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[]}],"git":{"createdTime":1725342317000,"updatedTime":1725342317000,"contributors":[{"name":"Iwindy","email":"12398041+iwindy0@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.27,"words":1282},"filePathRelative":"reports/编译原理/2.md","localizedDate":"2024年3月29日","excerpt":"\\n<h2>一、实验目的</h2>\\n<p>掌握词法分析器的构造原理，理解单词的类别和识别方法，掌握手工编程或 LEX 编程方法之一。</p>\\n<h2>二、实验内容</h2>\\n<p>编写一个词法分析器，能够将输入的源程序转换为单词序列输出。</p>\\n<h2>三、实验要求</h2>\\n<h3>源语言定义</h3>\\n<p>（1）该语言的关键字：<code>if while do break real true false int char bool float </code>(其中，<code>int、char、bool、float</code>在产生式中为<code>basic</code>) 所有的关键字都是保留字，并且必须是小写。\\n（2）<strong>id</strong>和<strong>num</strong>的正则表达式定义；\\n（3）专用符号：<code>+ - * / &lt; &lt;= &gt; &gt;= == != = ; , ( ) [ ] { } /* */ </code>\\n（4）空格由空白、换行符和制表符组成。空格通常被忽略，除了它必 须分开ID、NUM关键字。\\n（5）程序书写格式自由：一行可以有多个语句，一个语句也可以有多 行，单词之间可以插入任意空格。\\n（6）考虑注释。注释由<code>/*</code>和<code>*/</code>包含。注释可以放在任何空白出现的位置， 且可以超过一行。注释不能嵌套。</p>","autoDesc":true}');export{u as comp,v as data};
