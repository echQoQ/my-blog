import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,c as k,a as s,e as i,b as a,w as n,d as e,o as p}from"./app-DTa0zDVa.js";const d="/my-blog/images/20240517160814.png",o="/my-blog/images/20240517160747.png",r="/my-blog/images/20240517160856.png",c="/my-blog/images/20240517160952.png",g="/my-blog/images/20240517161027.png",m="/my-blog/images/20240517161108.png",A="/my-blog/images/20240517161218.png",y="/my-blog/images/20240517161237.png",B="/my-blog/images/20240517161840.png",F="/my-blog/images/20240517165126.png",u="/my-blog/images/20240517171558.png",v="/my-blog/images/20240517182522.png",b="/my-blog/images/20240517182538.png",_={},C=s("h2",{id:"_0x01-实验介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_0x01-实验介绍"},[s("span",null,"0x01 实验介绍")])],-1),E=s("code",null,"kmalloc()",-1),D=s("code",null,"vmalloc()",-1),f=s("code",null,"bf_malloc",-1),x=s("code",null,"kmalloc()",-1),R=s("code",null,"vmalloc()",-1),q=s("code",null,"kfree()",-1),N=s("code",null,"sbrk()",-1),z=s("code",null,"memset()",-1),K=e('<h2 id="_0x02-实验目的" tabindex="-1"><a class="header-anchor" href="#_0x02-实验目的"><span>0x02 实验目的</span></a></h2><p>⚫ 学习掌握<code>kmalloc()</code>和<code>vmalloc()</code>分配内存的差异；</p><p>⚫ 加深学生对首次适应算法和最佳适应算法的理解；</p><p>⚫ 锻炼学生编写内核模块的能力。</p><h2 id="_0x03-实验任务" tabindex="-1"><a class="header-anchor" href="#_0x03-实验任务"><span>0x03 实验任务</span></a></h2><h3 id="任务一-使用kmalloc分配内存" tabindex="-1"><a class="header-anchor" href="#任务一-使用kmalloc分配内存"><span>任务一：使用kmalloc分配内存</span></a></h3>',6),M=s("p",null,"[!note] ### 任务内容 请你按照以下提示完成如下任务：",-1),L=s("code",null,"kmalloc.c",-1),I=s("code",null,"kmalloc()",-1),w=s("code",null,"printk() ",-1),O=s("code",null,"kmalloc()",-1),P=s("code",null,"kmalloc()",-1),T=s("code",null,"printk()",-1),$=s("li",null,"加载模块，查看加载的模块内容，查看打印出的指针地址；",-1),j=s("li",null,"根据机器是32位或者是64位的情况，分析分配结果是否成功以及地址落在的区域，并给出相应的解释",-1),S=e(`<p><strong>给kmallocmem1和kmallocmem2分配内存空间</strong></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	kmallocmem1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> kmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> GFP_KERNEL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (kmallocmem1) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kmallocmem1 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, kmallocmem1);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate kmallocmem1!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	kmallocmem2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> kmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> GFP_KERNEL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (kmallocmem2) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kmallocmem2 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, kmallocmem2);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate kmallocmem2!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>寻找<code>kmalloc()</code>申请内存的上限</strong></p><p>定义一个整形变量mm</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mm</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为kmallocmem3分配<code>mm*1024*1024</code>比特的内存大小</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	kmallocmem3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> kmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">mm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> GFP_KERNEL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (kmallocmem3) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kmallocmem3 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, kmallocmem3);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate kmallocmem3!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用二分法策略将mm设置不同大小，结果分别如下</p>`,8),V=s("img",{src:d,alt:"",loading:"lazy"},null,-1),G=s("img",{src:o,alt:"",loading:"lazy"},null,-1),Z=s("img",{src:r,alt:"",loading:"lazy"},null,-1),W=s("img",{src:c,alt:"",loading:"lazy"},null,-1),H=s("img",{src:g,alt:"",loading:"lazy"},null,-1),J=s("img",{src:m,alt:"",loading:"lazy"},null,-1),Y=s("img",{src:A,alt:"",loading:"lazy"},null,-1),Q=s("img",{src:y,alt:"",loading:"lazy"},null,-1),U=e('<p>可以推断<code>kmalloc()</code>申请内存的上限为4MB</p><p>为了进一步确认，接下来给kmallocmem3分配<code>1024*1024*4 Bytes</code>，而给kmallocmem4分配<code>1024*1024*4+1 Bytes</code>，观察实验结果如下<img src="'+B+`" alt="" loading="lazy"> 由此确认了<code>kmalloc()</code>申请内存的上限为4MB</p><p><strong>结果分析</strong></p><ol><li><strong>kmallocmem1、kmallocmem2 和 kmallocmem3</strong> 分配成功，地址均落在低地址区域，这符合内核堆内存的分配特性。</li><li><strong>kmallocmem4</strong> 分配失败，因为请求的大小超过了 kmalloc 的最大可分配限制。</li></ol><p>在 64 位系统中，这些地址通常表示为 64 位长整数。尽管这些地址显示为 8 位十六进制数，但在实际使用中，可能只用到低位部分。内核地址空间管理确保这些地址有效且可用。</p><h3 id="任务二-使用vmalloc分配内存" tabindex="-1"><a class="header-anchor" href="#任务二-使用vmalloc分配内存"><span>任务二：使用vmalloc分配内存</span></a></h3><blockquote><p>[!note] ### 任务内容 请你参考上述kmalloc模块的编写提示完成如下任务：</p><ol><li>编写vmalloc.c内核模块，调用vmalloc() 函数分别为vmallocmem1、vmallocmem2、vmallocmem3分配8KB、1MB和64MB大小的内存空间并使用printk() 打印指针地址；</li><li>根据你在任务一中找到的kmalloc内存分配上限，请你为vmallocmem4分配比该上限稍大的内存；</li><li>处理分配失败时的逻辑，在分配失败时打印“Failed to allocate vmallocmem1/ vmallocmem2/ vmallocmem3!\\n”</li><li>编写Makefile文件，执行make；</li><li>加载模块，查看加载的模块内容，查看打印出的指针地址；</li><li>根据机器是32位或者是64位的情况，分析分配结果是否成功以及地址落在的区域，并给出相应的解释</li></ol></blockquote><p><strong>部分核心代码如下</strong></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __init </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mem_module_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Start vmalloc!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	vmallocmem1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vmallocmem1) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vmallocmem1 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, vmallocmem1);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate vmallocmem1!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	vmallocmem2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vmallocmem2) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vmallocmem2 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, vmallocmem2);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate vmallocmem2!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	vmallocmem3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vmallocmem3) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vmallocmem3 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, vmallocmem3);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate vmallocmem3!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	vmallocmem4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vmalloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vmallocmem4) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_INFO </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vmallocmem4 addr = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, vmallocmem4);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(KERN_ERR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to allocate vmallocmem4!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写<code>Makefile</code>如下</strong></p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ifneq</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KERNELRELEASE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">,)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	obj-m := vmalloc.o</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	KERNELDIR ?= /root/kernel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	PWD := </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pwd)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	$(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> -C </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KERNELDIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> M=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PWD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> modules</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endif</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.PHONY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> clean</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	-</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">rm *.mod.c *.o *.order *.symvers *.ko *.mod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写<code>a.sh</code>如下</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vmalloc.ko</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rmmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vmalloc.ko</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dmesg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行执行<code>bash a.sh</code>，结果如下</p><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>结果分析</strong>：</p>',16),X=e('<p>在 64 位系统中，这些地址通常表示为 64 位长整数。尽管这些地址显示为 8 位十六进制数，但在实际使用中，可能只用到低位部分。内核地址空间管理确保这些地址有效且可用。</p><h3 id="任务三-阅读并理解首次适应算法的实现" tabindex="-1"><a class="header-anchor" href="#任务三-阅读并理解首次适应算法的实现"><span>任务三：阅读并理解首次适应算法的实现</span></a></h3><blockquote><p>[!note] ### 任务内容 请你阅读并理解<code>ff_malloc.c</code>源文件，该文件基于链表实现了首次适应算法。其中<code>ff_malloc(size_t size)</code>用于分 配指定大小的内存空间，<code>free(void *prt)</code>用于释放内存空间，<code>calloc(size_t num, size_t len)</code>用于动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。</p></blockquote><p><strong>test.c编译运行结果如下</strong></p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>ff_malloc.c算法流程的理解</strong></p><ol><li><code>void free(void* ptr)</code><ol><li>如果指针为空，直接返回</li><li>将指针 <code>ptr</code> 转换为指向 <code>header</code> 的指针 <code>block</code>，并指向其前一个位置。</li><li>寻找插入点 <ol><li>遍历链表，找到合适的位置以保证链表按内存地址排序</li><li>通过检查 <code>block</code> 的地址和当前 <code>iter</code> 块及其下一个块的地址，找到插入位置。</li></ol></li><li>块合并 <ol><li>如果新释放的块与链表中相邻的块相连，则将它们合并成一个更大的块</li></ol></li><li>更新链表 <ol><li>插入新块或合并后的块到链表中</li></ol></li></ol></li><li><code>void *ff_malloc(size_t size)</code><ol><li>计算实际需要的块大小</li><li>如果链表为空，初始化链表，使其自循环</li><li>遍历链表，找到第一个大小足够的块 <ol><li>如果找到的块大小正好匹配，则直接返回该块</li><li>如果块大小超过需求，则拆分块并返回前半部分</li></ol></li><li>如果遍历链表后没有找到合适的块，则使用 <code>sbrk</code> 请求一块新的内存</li><li>将新请求的内存块加入到链表中，并再次进行分配</li></ol></li><li><code>void* calloc(size_t num, size_t len)</code><ol><li>调用 <code>ff_malloc</code>分配大小为 <code>num * len</code> 的内存块</li><li>使用 <code>memset</code> 将分配的内存块初始化为 0</li><li>返回指向分配和初始化好的内存块的指针</li></ol></li></ol><h3 id="任务四-实现最佳适应算法" tabindex="-1"><a class="header-anchor" href="#任务四-实现最佳适应算法"><span>任务四：实现最佳适应算法</span></a></h3><blockquote><p>[!note] 任务内容 请你阅读任务三中 <code>ff_malloc.c</code> 对首次适应算法的实现，基于最佳适应算法设计实现一个简单的内存管理程序，实现内存管理的频繁分配和回收，并通过日志打印等手段比较首次适应算法和最佳适应算法在内存分配上的区别。 <strong>子任务1：</strong> 编写 bf_malloc.c 文件实现首次适应算法，<code>bf_malloc.c </code>中需要包含 <code>bf_malloc(size_t size)</code>、 <code>free(void *prt)</code>、 <code>calloc(size_t num, size_t len)</code>三个函数。 <strong>子任务2：</strong> 参考任务三，编写内存分配测试脚本test.c以及用于编译ff_malloc.c和test.c的Makefile <strong>子任务3：</strong> 尝试在<code>ff_malloc.c</code> 和 <code>bf_malloc.c</code> 中使用<code> printk</code> (或<code> printf</code>)记录日志，输出能够体现 <code>ff_malloc</code> 和 <code>bf_malloc</code> 内 存分配差异的日志并给出分析。</p></blockquote><p><strong><code>void *bf_malloc(size_t size)</code>实现流程</strong></p><ol><li><strong>遍历空闲块链表</strong>： <ul><li>从链表的第一个节点开始遍历，查找符合条件的空闲块。</li><li>使用 <code>do-while</code> 循环，确保至少执行一次遍历。</li><li>在循环中，根据每个空闲块的大小，选择满足需求且大小最小的块作为最佳适应块。</li><li>如果找到符合条件的块，则记录下该块及其前一个节点。</li></ul></li><li><strong>分配内存</strong>： <ul><li>如果找到了最佳适应块，则进行内存分配。</li><li>如果最佳适应块的大小正好等于需求大小，则直接使用该块。</li><li>如果最佳适应块的大小大于需求大小，则拆分该块，将前半部分作为分配出去的内存，更新其大小，并将剩余部分保留在链表中。</li><li>如果没有找到符合条件的块，则请求新的内存块。</li></ul></li><li><strong>请求新的内存块</strong>： <ul><li>如果遍历完链表后仍未找到符合条件的块，则使用 <code>sbrk</code> 请求新的内存块。</li><li>将新分配的内存块加入到链表中，并再次执行分配过程。</li></ul></li><li><strong>返回结果</strong>： <ul><li>返回分配的内存块的地址。</li></ul></li></ol><p><strong>日志打印函数</strong></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> log_allocation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">] Allocated </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%zu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bytes at </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%p</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, strategy, size, ptr);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>日志结果分析</strong></p><p>ff_malloc</p><ol><li>内存分配的地址呈递增趋势。</li><li>每次分配都选择链表中第一个符合大小要求的空闲块。</li><li>分配的内存块地址不断增长，但空闲块的利用率相对较低，可能会产生大量的碎片。 <img src="`+v+'" alt="" loading="lazy"> bf_malloc</li><li>内存分配的地址并非严格递增，而是在整个空闲块中选择最适合需求大小的块。</li><li>每次分配都会在整个空闲块中寻找最小的可用块来分配内存。</li><li>分配的内存块地址相对分散，但整体空闲块的利用率更高，碎片较少。 <img src="'+b+'" alt="" loading="lazy"></li></ol><h2 id="_0x04-实验心得体会" tabindex="-1"><a class="header-anchor" href="#_0x04-实验心得体会"><span>0x04 实验心得体会</span></a></h2><p>这次实验中，通过使用内核函数 kmalloc() 和 vmalloc() 来实现内存的分配，并且根据提示实现了基于最佳适应算法的 bf_malloc 内存分配器。这个实验使我加深了对 Linux 内存分配的理解，同时也提升了我编写内核模块的能力。</p><p>首先，在学习和比较 kmalloc() 和 vmalloc() 时，使我深入了解了它们之间的差异。kmalloc() 用于分配小块连续的物理内存，而 vmalloc() 则用于分配大块的虚拟内存。</p><p>其次，在实现基于最佳适应算法的 bf_malloc 内存分配器时，我们需要考虑如何在内核中实现一种高效的内存分配策略。通过比较首次适应算法和最佳适应算法，我们更清晰地认识到不同算法的优缺点，以及在不同场景下它们的适用性。这有助于我们更好地理解内存分配算法的原理和实现方式。</p>',20);function ii(si,li){const l=h("font");return p(),k("div",null,[C,s("p",null,[i("本实验利用内核函数 "),E,i(", "),D,i(" 实现内存的分配，并要求学生根据提示实现基于最佳适应算 法的"),f,i(" 内存分配器，加深初学者对"),a(l,{color:"#4f81bd"},{default:n(()=>[i("Linux")]),_:1}),i("内存分配的理解。 在实验开始之前，需要注意以下两点： ① 本次实验已完成内核编译（"),a(l,{color:"#4f81bd"},{default:n(()=>[i("openEuler 4.19.08")]),_:1}),i("），可直接开始实验； ② 本次实验可能用到的内核函数有："),x,i(", "),R,i(", "),q,i(", "),N,i(", "),z,i("，参数和返回类型请 在"),a(l,{color:"#9bbb59"},{default:n(()=>[i("https://manpages.org/")]),_:1}),i("查询。")]),K,s("blockquote",null,[M,s("ol",null,[s("li",null,[i("编写 "),L,i(" 内核模块，调用"),I,i(" 函数分别为"),a(l,{color:"#c0504d"},{default:n(()=>[i("kmallocmem1")]),_:1}),i("和"),a(l,{color:"#c0504d"},{default:n(()=>[i("kmallocmem2")]),_:1}),i("分配 1KB和8KB大小的内存空间并使用"),w,i("打印指针地址；")]),s("li",null,[i("测试 "),O,i("可分配的内存大小是否有上限，若有，则寻找"),P,i("申请内存的上限，为"),a(l,{color:"#c0504d"},{default:n(()=>[i("kmallocmem3")]),_:1}),i("申请最大可分配上限的内存空间，在实验报告中描述你是如何确定该上限的，并使用"),T,i(" 打印指针地址；同时为"),a(l,{color:"#c0504d"},{default:n(()=>[i("kmallocmem4")]),_:1}),i("申请比最大可分配上限稍大的内存空间；")]),s("li",null,[i("处理分配失败时的逻辑，在分配失败时打印“"),a(l,{color:"#244061"},{default:n(()=>[i("Failed to allocate kmallocmem1/ kmallocmem2/ kmallocmem3 / kmallocmem4!\\n")]),_:1}),i("”")]),s("li",null,[i("编写 Makefile 文件，执行make (注意修改："),a(l,{color:"#f79646"},{default:n(()=>[i("KERNELDIR ?= /usr/lib/modules/$(shell uname -r)/build")]),_:1}),i("，使用本地内核)；")]),$,j])]),S,s("p",null,[i("mm=1:"),a(l,{color:"#00b0f0"},{default:n(()=>[i("成功")]),_:1}),V,i(" mm=256:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),G,i(" mm=128:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),Z,i(" mm=64:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),W,i(" mm=32:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),H,i(" mm=16:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),J,i(" mm=8:"),a(l,{color:"#c00000"},{default:n(()=>[i("失败")]),_:1}),Y,i(" mm=4:"),a(l,{color:"#00b0f0"},{default:n(()=>[i("成功")]),_:1}),Q]),U,a(l,{color:"#00b050"},{default:n(()=>[i("vmallocmem1、vmallocmem2、vmallocmem3、vmallocmem4")]),_:1}),i("均成功分配到了所需的内存地址"),X])}const ei=t(_,[["render",ii],["__file","实验五 openEuler 操作系统 内存管理实验.html.vue"]]),ti=JSON.parse('{"path":"/reports/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%9E%E9%AA%8C%E4%BA%94%20openEuler%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C.html","title":"实验五 openEuler 操作系统 内存管理实验","lang":"zh-CN","frontmatter":{"title":"实验五 openEuler 操作系统 内存管理实验","cover":"/assets/images/cover2.jpg","icon":"paper-plane","order":5,"author":"Mr.Liu","category":["实验报告"],"tag":["操作系统","实验报告"],"sticky":false,"star":false,"footer":"箱根山岳险天下","copyright":"无版权","description":"0x01 实验介绍 本实验利用内核函数 kmalloc(), vmalloc() 实现内存的分配，并要求学生根据提示实现基于最佳适应算 法的bf_malloc 内存分配器，加深初学者对内存分配的理解。 在实验开始之前，需要注意以下两点： ① 本次实验已完成内核编译（），可直接开始实验； ② 本次实验可能用到的内核函数有：kmalloc(), vmall...","head":[["meta",{"property":"og:url","content":"https://fancxx.github.io/my-blog/reports/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%9E%E9%AA%8C%E4%BA%94%20openEuler%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C.html"}],["meta",{"property":"og:site_name","content":"Mr.Liu"}],["meta",{"property":"og:title","content":"实验五 openEuler 操作系统 内存管理实验"}],["meta",{"property":"og:description","content":"0x01 实验介绍 本实验利用内核函数 kmalloc(), vmalloc() 实现内存的分配，并要求学生根据提示实现基于最佳适应算 法的bf_malloc 内存分配器，加深初学者对内存分配的理解。 在实验开始之前，需要注意以下两点： ① 本次实验已完成内核编译（），可直接开始实验； ② 本次实验可能用到的内核函数有：kmalloc(), vmall..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fancxx.github.io/my-blog/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T05:45:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://fancxx.github.io/my-blog/assets/images/cover2.jpg"}],["meta",{"name":"twitter:image:alt","content":"实验五 openEuler 操作系统 内存管理实验"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:tag","content":"实验报告"}],["meta",{"property":"article:modified_time","content":"2024-09-03T05:45:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实验五 openEuler 操作系统 内存管理实验\\",\\"image\\":[\\"https://fancxx.github.io/my-blog/images/20240517160814.png\\",\\"https://fancxx.github.io/my-blog/images/20240517160747.png\\",\\"https://fancxx.github.io/my-blog/images/20240517160856.png\\",\\"https://fancxx.github.io/my-blog/images/20240517160952.png\\",\\"https://fancxx.github.io/my-blog/images/20240517161027.png\\",\\"https://fancxx.github.io/my-blog/images/20240517161108.png\\",\\"https://fancxx.github.io/my-blog/images/20240517161218.png\\",\\"https://fancxx.github.io/my-blog/images/20240517161237.png\\",\\"https://fancxx.github.io/my-blog/images/20240517161840.png\\",\\"https://fancxx.github.io/my-blog/images/20240517165126.png\\",\\"https://fancxx.github.io/my-blog/images/20240517171558.png\\",\\"https://fancxx.github.io/my-blog/images/20240517182522.png\\",\\"https://fancxx.github.io/my-blog/images/20240517182538.png\\"],\\"dateModified\\":\\"2024-09-03T05:45:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\"}]}"]]},"headers":[{"level":2,"title":"0x01 实验介绍","slug":"_0x01-实验介绍","link":"#_0x01-实验介绍","children":[]},{"level":2,"title":"0x02 实验目的","slug":"_0x02-实验目的","link":"#_0x02-实验目的","children":[]},{"level":2,"title":"0x03 实验任务","slug":"_0x03-实验任务","link":"#_0x03-实验任务","children":[{"level":3,"title":"任务一：使用kmalloc分配内存","slug":"任务一-使用kmalloc分配内存","link":"#任务一-使用kmalloc分配内存","children":[]},{"level":3,"title":"任务二：使用vmalloc分配内存","slug":"任务二-使用vmalloc分配内存","link":"#任务二-使用vmalloc分配内存","children":[]},{"level":3,"title":"任务三：阅读并理解首次适应算法的实现","slug":"任务三-阅读并理解首次适应算法的实现","link":"#任务三-阅读并理解首次适应算法的实现","children":[]},{"level":3,"title":"任务四：实现最佳适应算法","slug":"任务四-实现最佳适应算法","link":"#任务四-实现最佳适应算法","children":[]}]},{"level":2,"title":"0x04 实验心得体会","slug":"_0x04-实验心得体会","link":"#_0x04-实验心得体会","children":[]}],"git":{"createdTime":1725342317000,"updatedTime":1725342317000,"contributors":[{"name":"Iwindy","email":"12398041+iwindy0@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":10.07,"words":3021},"filePathRelative":"reports/操作系统/实验五 openEuler 操作系统 内存管理实验.md","localizedDate":"2024年9月3日","excerpt":"<h2>0x01 实验介绍</h2>\\n<p>本实验利用内核函数 <code>kmalloc()</code>, <code>vmalloc()</code> 实现内存的分配，并要求学生根据提示实现基于最佳适应算 法的<code>bf_malloc</code> 内存分配器，加深初学者对内存分配的理解。\\n在实验开始之前，需要注意以下两点：\\n① 本次实验已完成内核编译（），可直接开始实验；\\n② 本次实验可能用到的内核函数有：<code>kmalloc()</code>, <code>vmalloc()</code>, <code>kfree()</code>, <code>sbrk()</code>, <code>memset()</code>，参数和返回类型请 在查询。</p>","autoDesc":true}');export{ei as comp,ti as data};
