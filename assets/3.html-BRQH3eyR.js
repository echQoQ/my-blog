import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-D39E384z.js";const l="/my-blog/images/20240426222003.png",t={};function p(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="编译原理第三次实验" tabindex="-1"><a class="header-anchor" href="#编译原理第三次实验"><span>编译原理第三次实验</span></a></h1><h2 id="_0x01-实验目的" tabindex="-1"><a class="header-anchor" href="#_0x01-实验目的"><span>0x01 实验目的</span></a></h2><p>掌握语法分析器的构造原理，掌握递归下降法的编程方法。</p><h2 id="_0x02-实验内容" tabindex="-1"><a class="header-anchor" href="#_0x02-实验内容"><span>0x02 实验内容</span></a></h2><p>用<strong>递归下降法</strong>编写一个语法分析程序，使之与词法分析器结合，能够根据语言的上下文无关文法，识别输入的单词序列是否文法的句子。（注意，需要改写文法，消除左递归等）</p><h2 id="_0x03-实验要求" tabindex="-1"><a class="header-anchor" href="#_0x03-实验要求"><span>0x03 实验要求</span></a></h2><ol><li>个人完成，提交实验报告</li><li>实验报告中给出采用测试源代码片断，及其对应的最左推导过程</li></ol><h2 id="_0x04-实验内容" tabindex="-1"><a class="header-anchor" href="#_0x04-实验内容"><span>0x04 实验内容</span></a></h2><h3 id="_1-改写文法" tabindex="-1"><a class="header-anchor" href="#_1-改写文法"><span>1 改写文法</span></a></h3><p>对实验所给产生式消除左递归、提取公共左因子</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>program 	→   block</span></span>
<span class="line"><span>block 	    → 	{ decls stmts }</span></span>
<span class="line"><span>decls       →   decl decls | \`e\`</span></span>
<span class="line"><span>decl        →   type id;</span></span>
<span class="line"><span>type        →   int | float| char</span></span>
<span class="line"><span>stmts 	    →   stmt stmts | \`e\`</span></span>
<span class="line"><span>stmt 	    →	id = expr ; </span></span>
<span class="line"><span>			|	if ( bool ) stmt</span></span>
<span class="line"><span>			|	if ( bool) stmt else stmt</span></span>
<span class="line"><span>			|	while (bool) stmt </span></span>
<span class="line"><span>			|	do stmt while (bool ) ; </span></span>
<span class="line"><span>			|	break ; </span></span>
<span class="line"><span>			|	block</span></span>
<span class="line"><span>bool 	    → 	expr bool2</span></span>
<span class="line"><span>bool2       →   relop expr | \`e\`</span></span>
<span class="line"><span>expr 	    → 	term expr2</span></span>
<span class="line"><span>expr2       →   B expr2 | \`e\`</span></span>
<span class="line"><span>B           →   + term </span></span>
<span class="line"><span>            |   - term</span></span>
<span class="line"><span>term 	    → 	factor term2</span></span>
<span class="line"><span>term2       →   C term2 | \`e\`</span></span>
<span class="line"><span>C           →   * factor</span></span>
<span class="line"><span>			|   / factor</span></span>
<span class="line"><span>factor	    → 	( expr ) | id | num</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-带预测的语法分析器" tabindex="-1"><a class="header-anchor" href="#_2-带预测的语法分析器"><span>2 带预测的语法分析器</span></a></h3><p>将示例中的parser.cpp进行改写补充，以实现带预测的语法分析器</p><p>例如，对于decls，由于$First(decls)=First(decl)=First(type)={INT,FLOAT,CHAR}$ 则，其预测分析函数改写为：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lookahead </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> INT </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lookahead </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FLOAT </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lookahead </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHAR) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;decls -&gt; decl decls</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        decl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        decls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再如对于 <code>stmt → if ( bool ) stmt | if ( bool) stmt else stmt | others</code> 也可以用预测分析解决：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IF:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stmt -&gt; if(expr) stmt &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IF);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;(&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	bool1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	stmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( lookahead </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ELSE )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;else stmt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ELSE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		stmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的函数思路都差不多，不再赘述，完整代码见<code>parser.cpp</code></p><h3 id="_3-实验结果" tabindex="-1"><a class="header-anchor" href="#_3-实验结果"><span>3 实验结果</span></a></h3><p>对于<strong>code1.txt</strong></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{ </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其对应结果如下：</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23)]))}const k=i(t,[["render",p],["__file","3.html.vue"]]),c=JSON.parse('{"path":"/reports/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.html","title":"编译原理第三次实验","lang":"zh-CN","frontmatter":{"title":"编译原理第三次实验","cover":"/assets/images/cover1.jpg","icon":"paper-plane","order":3,"author":"Mr.Liu","date":"2024-04-26T00:00:00.000Z","category":["实验报告"],"tag":["编译原理","实验报告"],"sticky":false,"star":false,"footer":"箱根山岳险天下","copyright":"无版权","description":"编译原理第三次实验 0x01 实验目的 掌握语法分析器的构造原理，掌握递归下降法的编程方法。 0x02 实验内容 用递归下降法编写一个语法分析程序，使之与词法分析器结合，能够根据语言的上下文无关文法，识别输入的单词序列是否文法的句子。（注意，需要改写文法，消除左递归等） 0x03 实验要求 个人完成，提交实验报告 实验报告中给出采用测试源代码片断，及其...","head":[["meta",{"property":"og:url","content":"https://echqoq.github.io/my-blog/my-blog/reports/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.html"}],["meta",{"property":"og:site_name","content":"Mr.Liu"}],["meta",{"property":"og:title","content":"编译原理第三次实验"}],["meta",{"property":"og:description","content":"编译原理第三次实验 0x01 实验目的 掌握语法分析器的构造原理，掌握递归下降法的编程方法。 0x02 实验内容 用递归下降法编写一个语法分析程序，使之与词法分析器结合，能够根据语言的上下文无关文法，识别输入的单词序列是否文法的句子。（注意，需要改写文法，消除左递归等） 0x03 实验要求 个人完成，提交实验报告 实验报告中给出采用测试源代码片断，及其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://echqoq.github.io/my-blog/my-blog/assets/images/cover1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T05:45:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://echqoq.github.io/my-blog/my-blog/assets/images/cover1.jpg"}],["meta",{"name":"twitter:image:alt","content":"编译原理第三次实验"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"编译原理"}],["meta",{"property":"article:tag","content":"实验报告"}],["meta",{"property":"article:published_time","content":"2024-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-03T05:45:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译原理第三次实验\\",\\"image\\":[\\"https://echqoq.github.io/my-blog/my-blog/images/20240426222003.png\\"],\\"datePublished\\":\\"2024-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-03T05:45:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\"}]}"]]},"headers":[{"level":2,"title":"0x01 实验目的","slug":"_0x01-实验目的","link":"#_0x01-实验目的","children":[]},{"level":2,"title":"0x02 实验内容","slug":"_0x02-实验内容","link":"#_0x02-实验内容","children":[]},{"level":2,"title":"0x03 实验要求","slug":"_0x03-实验要求","link":"#_0x03-实验要求","children":[]},{"level":2,"title":"0x04 实验内容","slug":"_0x04-实验内容","link":"#_0x04-实验内容","children":[{"level":3,"title":"1 改写文法","slug":"_1-改写文法","link":"#_1-改写文法","children":[]},{"level":3,"title":"2 带预测的语法分析器","slug":"_2-带预测的语法分析器","link":"#_2-带预测的语法分析器","children":[]},{"level":3,"title":"3 实验结果","slug":"_3-实验结果","link":"#_3-实验结果","children":[]}]}],"git":{"createdTime":1725342317000,"updatedTime":1725342317000,"contributors":[{"name":"Iwindy","email":"12398041+iwindy0@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":1.99,"words":596},"filePathRelative":"reports/编译原理/3.md","localizedDate":"2024年4月26日","excerpt":"\\n<h2>0x01 实验目的</h2>\\n<p>掌握语法分析器的构造原理，掌握递归下降法的编程方法。</p>\\n<h2>0x02 实验内容</h2>\\n<p>用<strong>递归下降法</strong>编写一个语法分析程序，使之与词法分析器结合，能够根据语言的上下文无关文法，识别输入的单词序列是否文法的句子。（注意，需要改写文法，消除左递归等）</p>\\n<h2>0x03 实验要求</h2>\\n<ol>\\n<li>个人完成，提交实验报告</li>\\n<li>实验报告中给出采用测试源代码片断，及其对应的最左推导过程</li>\\n</ol>\\n<h2>0x04 实验内容</h2>\\n<h3>1 改写文法</h3>\\n","autoDesc":true}');export{k as comp,c as data};
