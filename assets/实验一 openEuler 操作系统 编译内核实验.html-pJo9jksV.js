import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as a}from"./app-D39E384z.js";const s="/my-blog/images/20240311105946.png",t="/my-blog/images/20240311110350.png",r="/my-blog/images/20240311212751.png",o={};function d(p,e){return a(),i("div",null,e[0]||(e[0]=[n(`<h1 id="实验一-openeuler-操作系统-编译内核实验" tabindex="-1"><a class="header-anchor" href="#实验一-openeuler-操作系统-编译内核实验"><span>实验一 openEuler 操作系统 编译内核实验</span></a></h1><h2 id="_0x01-实验目的" tabindex="-1"><a class="header-anchor" href="#_0x01-实验目的"><span>0x01 实验目的</span></a></h2><ul><li>通过安装openEuler操作系统、编译安装openEuler操作系统新内核以及简单的内核模块编程任务操作来： <ul><li>学习掌握如何在树莓派上安装操作系统。</li><li>学习掌握如何编译操作系统内核。</li><li>了解内核模块编程。</li></ul></li></ul><h2 id="_0x02-实验过程" tabindex="-1"><a class="header-anchor" href="#_0x02-实验过程"><span>0x02 实验过程</span></a></h2><h3 id="_1-安装openeuler操作系统" tabindex="-1"><a class="header-anchor" href="#_1-安装openeuler操作系统"><span>1 安装openEuler操作系统</span></a></h3><h4 id="_1-1-下载openeuler-22-03-lts-sp3树莓派版本" tabindex="-1"><a class="header-anchor" href="#_1-1-下载openeuler-22-03-lts-sp3树莓派版本"><span>1.1 下载openEuler 22.03 LTS SP3树莓派版本</span></a></h4><ul><li>登录openEuler Repo网站 <ul><li><a href="https://repo.openeuler.org/" target="_blank" rel="noopener noreferrer">repo.openeuler.org</a></li></ul></li><li>找到对应版本的镜像，将openEuler-22.03-LTS-SP3-raspi-aarch64.img.xz下载到本地</li></ul><h4 id="_1-2-烧录系统" tabindex="-1"><a class="header-anchor" href="#_1-2-烧录系统"><span>1.2 烧录系统</span></a></h4><ol><li>将SD卡通过读卡器插入电脑</li><li>使用Raspberry Pi Imager将镜像烧录到SD卡中</li><li>烧录完毕后，拔下SD卡并插入树莓派</li></ol><h4 id="_1-3-连接网络" tabindex="-1"><a class="header-anchor" href="#_1-3-连接网络"><span>1.3 连接网络</span></a></h4><ol><li>在设置 --&gt; 网络和internet --&gt; 高级网络设置中，在wifi的更多适配器选项中点击编辑，在共享选项卡上选中“允许其他网络用户通过此计算机的Internet连接来连接”选项。</li><li>通过网线把树莓派与电脑相连</li><li>在电脑命令行窗口输入arp –a查看新增加的动态IP地址即为raspberry pi的ip地址，利用该ip使用Xshell来连接树莓派，默认账密为root/openeuler</li><li>打开手机的个人wifi, 并利用命令行<code>nmcli dev wifi connect 你的WIFI名 password 你的WIFI密码</code>将树莓派连接上手机热点</li><li>将电脑也连接上手机热点，通过手机热点为树莓派分配的ip再次用xshell连接上树莓派，此时网线可以撤去，电脑通过无线连接控制树莓派</li></ol><h4 id="_1-4-安装所需组件" tabindex="-1"><a class="header-anchor" href="#_1-4-安装所需组件"><span>1.4 安装所需组件</span></a></h4><ul><li>命令如下</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>dnf install yum</span></span>
<span class="line"><span>yum -y install unzip yum -y install tar yum -y install lrzsz yum -y install gcc yum -y install make yum -y install flex yum -y install bison yum -y install openssl-devel yum -y install perl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-openeuler内核编译与安装" tabindex="-1"><a class="header-anchor" href="#_2-openeuler内核编译与安装"><span>2 openEuler内核编译与安装</span></a></h3><h4 id="_2-1-备份boot目录以防后续步骤更新内核失败" tabindex="-1"><a class="header-anchor" href="#_2-1-备份boot目录以防后续步骤更新内核失败"><span>2.1 备份boot目录以防后续步骤更新内核失败</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tar czvf boot_origin.tgz /boot/</span></span>
<span class="line"><span>sz boot_origin.tgz   # 将备份文件发送到本地</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-获取内核源码" tabindex="-1"><a class="header-anchor" href="#_2-2-获取内核源码"><span>2.2 获取内核源码</span></a></h4><ol><li>在树莓派安装git <code>yum install git</code>，并完成个人的基本配置，确保能使用gitee仓库克隆</li><li>在树莓派中使用git下载内核源码:<code>git clone git@gitee.com:openeuler/raspberrypi-kernel.git -b OLK-5.10</code></li><li>下载完毕后将其重命名：<code>mv raspberrypi-kernel-openEuler-22.03-LTS-SP2 kernel</code></li></ol><h4 id="_2-3-编译内核" tabindex="-1"><a class="header-anchor" href="#_2-3-编译内核"><span>2.3 编译内核</span></a></h4><ol><li>首先进入kernel目录：<code>cd kernel</code></li><li>加载默认配置：<code>make bcm2711_defconfig</code></li><li>编译内核：<code>make ARCH=arm64 -j4</code></li><li>创建编译内核模块目录：<code>mkdir ../output</code></li><li>编译内核模块：<code>make INSTALL_MOD_PATH=../output/ modules_install</code></li></ol><h4 id="_2-4-切换内核" tabindex="-1"><a class="header-anchor" href="#_2-4-切换内核"><span>2.4 切换内核</span></a></h4><ol><li>查看当前内核版本：<code>uname -a</code><img src="`+s+`" alt="" loading="lazy"></li><li>将内核放进引导</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /root/output/lib/modules/5.10.0-v8/kernel </span></span>
<span class="line"><span>cp arch/arm64/boot/Image /boot/kernel8.img</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>将设备树文件放进引导</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cp arch/arm64/boot/dts/broadcom/*.dtb /boot/           </span></span>
<span class="line"><span>cp arch/arm64/boot/dts/overlays/*.dtb* /boot/overlays/ </span></span>
<span class="line"><span>cp arch/arm64/boot/dts/overlays/README /boot/overlays/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>重启系统</li><li>再次通过网线将电脑与树莓派相连，然后用xshell实现对树莓派的控制</li><li>查看新的内核版本：<code>uname -a</code><img src="`+t+`" alt="" loading="lazy"></li><li>可见内核切换成功</li></ol><h4 id="_2-5-再次配置wifi" tabindex="-1"><a class="header-anchor" href="#_2-5-再次配置wifi"><span>2.5 再次配置WIFI</span></a></h4><ol><li>切换内核后，树莓派会找不到热点，无法进行无线连接，此时需要先在终端输入下列命令：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>insmod ~/output/lib/modules/5.10.0-v8/kernel/net/rfkill/rfkill.ko</span></span>
<span class="line"><span>insmod ~/output/lib/modules/5.10.0-v8/kernel/drivers/net/wireless/broadcom/brcm80211/brcmutil/brcmutil.ko</span></span>
<span class="line"><span>insmod ~/output/lib/modules/5.10.0-v8/kernel/net/wireless/cfg80211.ko</span></span>
<span class="line"><span>insmod ~/output/lib/modules/5.10.0-v8/kernel/drivers/net/wireless/broadcom/brcm80211/brcmfmac/brcmfmac.ko</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>接着便可通过命令行使树莓派连接WIFI：<code>nmcli dev wifi connect 你的WIFI名 password 你的WIFI密码</code></li><li>为了使树莓派重启后可以自动连接WIFI，需要将上面一系列insmod命令写入/etc/rc.local里，这样树莓派开机后自动加载这些驱动，从而能够搜索到附近WIFI，并自动连接</li></ol><h2 id="_0x03-任务一" tabindex="-1"><a class="header-anchor" href="#_0x03-任务一"><span>0x03 任务一</span></a></h2><h3 id="_1-任务要求" tabindex="-1"><a class="header-anchor" href="#_1-任务要求"><span>1 任务要求</span></a></h3><ul><li>查找相关资料，解释hello_world.c文件中以下代码的含义和作用 <ul><li>[1]MODULE_LICENSE</li><li>[2]module_param [3]MODULE_PARM_DESC</li><li>[4]module_init</li><li>[5]module_exit</li><li>[6]__init</li><li>[7]__exit</li></ul></li></ul><h3 id="_2-代码解释" tabindex="-1"><a class="header-anchor" href="#_2-代码解释"><span>2 代码解释</span></a></h3><ul><li>[1]MODULE_LICENSE <ul><li>含义 <ul><li>模块的许可证声明</li></ul></li><li>作用 <ul><li>从2.4.10版本内核开始，模块必须通过MODULE_LICENSE宏声明此模块的许可证，否则在加载此模块时，会收到内核被污染 “kernel tainted” 的警告。从linux/module.h文件中可以看到，被内核接受的有意义的许可证有 “GPL”，“GPL v2”，“GPL and additional rights”，“Dual BSD/GPL”，“Dual MPL/GPL”，“Proprietary”。</li></ul></li><li>来源 <ul><li><a href="https://blog.csdn.net/kwame211/article/details/77531748" target="_blank" rel="noopener noreferrer">模块的许可证声明 - MODULE_LICENSE(“GPL”)-CSDN博客</a></li></ul></li></ul></li><li>[2]module_parameter <ul><li>含义 <ul><li>定义模块参数的方法:module_param(name, type, perm);其中, <ul><li>name:表示参数的名字;</li><li>type:表示参数的类型;</li><li>perm:表示参数的访问权限;</li></ul></li></ul></li><li>作用 <ul><li>使用户可在系统启动或模块装载时为参数指定相应值</li></ul></li><li>来源 <ul><li><a href="https://blog.csdn.net/sinat_29891353/article/details/106355202" target="_blank" rel="noopener noreferrer">Linux内核之module_param()函数使用说明-CSDN博客</a></li></ul></li></ul></li><li>[3]MODULE_PARM_DESC <ul><li>含义 <ul><li>MODULE_PARM_DESC(para, mesg),其中 <ul><li>para:表示参数名字</li><li>mesg:参数描述</li></ul></li></ul></li><li>作用 <ul><li>对模块的参数进行描述</li></ul></li><li>来源 <ul><li><a href="https://blog.csdn.net/MACMACip/article/details/105554505" target="_blank" rel="noopener noreferrer">MODULE_PARM_DESC(para, mesg)-CSDN博客</a></li></ul></li></ul></li><li>[4]module_init <ul><li>含义 <ul><li>是 Linux 内核中的一个宏，用于标记驱动模块的起始函数。</li></ul></li><li>作用 <ul><li>用于定义在加载驱动模块时执行的函数</li><li>当内核初始化阶段或者动态加载模块时，被 <code>module_init()</code> 标记的函数会自动运行</li><li>无论模块是编译进内核镜像还是以 <code>.ko</code> 文件形式加载，都从这里开始运行</li></ul></li><li>来源 <ul><li>copilot + <a href="https://zhuanlan.zhihu.com/p/615272622" target="_blank" rel="noopener noreferrer">module_init（linux kernel 宏函数之“模块的起点”） - 知乎 (zhihu.com)</a></li></ul></li></ul></li><li>[5]module_exit <ul><li>含义</li><li><ul><li>是 Linux 内核中的一个宏，用于标记驱动模块的退出函数</li></ul></li><li>作用 <ul><li>用于定义在卸载驱动模块时执行的函数，</li><li>当使用 <code>rmmod</code> 命令卸载模块时，内核会调用被 <code>module_exit()</code> 标记的函数</li></ul></li><li>来源： <ul><li>copilot</li></ul></li></ul></li><li>[6]__init <ul><li>作用 <ul><li>通常用于标记<strong>内核初始化阶段</strong>使用的函数。这些函数会被放置在 <code>.init.text</code> 区域中</li><li>在内核初始化完成后，这些函数占用的内存可以被回收利用。</li></ul></li><li>来源 <ul><li>copilot</li></ul></li></ul></li><li>[7]__exit <ul><li>作用 <ul><li>用于标记<strong>模块卸载阶段</strong>使用的函数。这些函数会被放置在 <code>.exit.text</code>区域中</li><li>当模块被编译为内核的一部分时，这些函数将被忽略，因为在静态编译的情况下，卸载函数永远不会被调用</li></ul></li><li>来源 <ul><li>copilot</li></ul></li></ul></li></ul><h2 id="_0x04-任务二" tabindex="-1"><a class="header-anchor" href="#_0x04-任务二"><span>0x04 任务二</span></a></h2><h3 id="_1-任务要求-1" tabindex="-1"><a class="header-anchor" href="#_1-任务要求-1"><span>1 任务要求</span></a></h3><blockquote><p>请参考hello_world.c 和 Makefile 文件，编写hello_magic_student.c 和 Makefile，完成以下任务： 1.在 hello_magic_student.c 文件中定义函数 hello_student(…)，该函数包含 3 个参数：id, name, age，分别代 表学号、姓名和年龄，并通过printk输出：” My name is \${name}, student id is \${id}. I am \${age} years old.” 2.在 hello_magic_student.c 文件中定义函数 my_magic_number(…)，该函数包含 2 个参数：id 和 age，分别代表学号和年龄。请你在该函数里将学号的每一位数字相加后再与年龄求和，将求和结果的 个位数作为magic_number，并使用printk 输出：”My magic number is \${magic_number}.”。 完成hello_magic_student.c 文件的编写后，参考 hello_world 模块的 Makefile 并适当调整，在加载内 核时提供学号、姓名和年龄，通过dmesg命令查看printk的输出。</p></blockquote><h3 id="_2-代码展示" tabindex="-1"><a class="header-anchor" href="#_2-代码展示"><span>2 代码展示</span></a></h3><h4 id="_2-1-hello-magic-student-c-与关键代码说明" tabindex="-1"><a class="header-anchor" href="#_2-1-hello-magic-student-c-与关键代码说明"><span>2.1 hello_magic_student.c 与关键代码说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;linux/module.h&gt; //头文件</span></span>
<span class="line"><span>MODULE_LICENSE(&quot;GPL&quot;);  //模块的许可证声明</span></span>
<span class="line"><span>static int id;</span></span>
<span class="line"><span>static char* name;</span></span>
<span class="line"><span>static int age;        //三个自定义静态变量</span></span>
<span class="line"><span>module_param(id, int, 0644);  //允许用户输入其值</span></span>
<span class="line"><span>MODULE_PARM_DESC(id, &quot;int param\\n&quot;);  //为变量添加说明</span></span>
<span class="line"><span>module_param(name, charp, 0644);</span></span>
<span class="line"><span>MODULE_PARM_DESC(name, &quot;char* param&quot;);</span></span>
<span class="line"><span>module_param(age, int, 0644);</span></span>
<span class="line"><span>MODULE_PARM_DESC(age, &quot;int param\\n&quot;);</span></span>
<span class="line"><span>void hello_student(int id, char* name, int age) {</span></span>
<span class="line"><span>	printk(&quot;My name is %s, student id is %d. I am %d years old.&quot;,name,id,age);   //打印字符串</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>int __init hello_init(void) {</span></span>
<span class="line"><span>	printk(KERN_ALERT &quot;Init module.\\n&quot;);</span></span>
<span class="line"><span>	hello_student(id, name, age);</span></span>
<span class="line"><span>	return 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>void __exit hello_exit(void) {</span></span>
<span class="line"><span>	printk(KERN_INFO &quot;Exit module.\\n&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>module_init(hello_init);  //标记模块导入内核时启动的函数</span></span>
<span class="line"><span>module_exit(hello_exit);  //标记模块从内核卸载时启动的函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-makefile" tabindex="-1"><a class="header-anchor" href="#_2-2-makefile"><span>2.2 Makefile</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ifneq ($(KERNELRELEASE),)</span></span>
<span class="line"><span>	obj-m := hello_magic_student.o</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>	KERNELDIR ?= /root/kernel</span></span>
<span class="line"><span>	PWD := $(shell pwd)</span></span>
<span class="line"><span>default:</span></span>
<span class="line"><span>	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules</span></span>
<span class="line"><span>endif</span></span>
<span class="line"><span>.PHONY: clean</span></span>
<span class="line"><span>clean:</span></span>
<span class="line"><span>	-rm *.mod.c *.o *.order *.symvers *.ko *.mod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-运行结果" tabindex="-1"><a class="header-anchor" href="#_3-运行结果"><span>3 运行结果</span></a></h3><ul><li><code>make</code><ul><li>编译</li></ul></li><li><code>insmod hello_magic_student.ko id=4174 name=&quot;FUNXXX&quot; age=22</code><ul><li>将模块导入内核并输入变量</li></ul></li><li><code>lsmod | grep hello_magic_student</code><ul><li>查看是否导入成功</li></ul></li><li><code>rmmod hello_magic_student</code><ul><li>从内核卸载模块</li></ul></li><li><code>dmesg</code><ul><li>显示内核的消息缓冲区内容</li></ul></li></ul><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_0x05-实验心得体会" tabindex="-1"><a class="header-anchor" href="#_0x05-实验心得体会"><span>0x05 实验心得体会</span></a></h2><blockquote><p>本次实验完成了在树莓派上安装操作系统以及手动编译内核，并模仿着编写了C文件和Makefile，并在树莓派上编译、导入内核等。通过这些让我切实体会到了与内核的交互，也加深了我对操作系统的初步认识。</p></blockquote>',49)]))}const h=l(o,[["render",d],["__file","实验一 openEuler 操作系统 编译内核实验.html.vue"]]),m=JSON.parse('{"path":"/reports/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%9E%E9%AA%8C%E4%B8%80%20openEuler%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E5%AE%9E%E9%AA%8C.html","title":"实验一 openEuler 操作系统 编译内核实验","lang":"zh-CN","frontmatter":{"title":"实验一 openEuler 操作系统 编译内核实验","cover":"/assets/images/cover2.jpg","icon":"paper-plane","order":1,"author":"Mr.Liu","category":["实验报告"],"tag":["操作系统","实验报告"],"sticky":false,"star":false,"footer":"箱根山岳险天下","copyright":"无版权","description":"实验一 openEuler 操作系统 编译内核实验 0x01 实验目的 通过安装openEuler操作系统、编译安装openEuler操作系统新内核以及简单的内核模块编程任务操作来： 学习掌握如何在树莓派上安装操作系统。 学习掌握如何编译操作系统内核。 了解内核模块编程。 0x02 实验过程 1 安装openEuler操作系统 1.1 下载openEu...","head":[["meta",{"property":"og:url","content":"https://echqoq.github.io/my-blog/my-blog/reports/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%AE%9E%E9%AA%8C%E4%B8%80%20openEuler%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E5%AE%9E%E9%AA%8C.html"}],["meta",{"property":"og:site_name","content":"Mr.Liu"}],["meta",{"property":"og:title","content":"实验一 openEuler 操作系统 编译内核实验"}],["meta",{"property":"og:description","content":"实验一 openEuler 操作系统 编译内核实验 0x01 实验目的 通过安装openEuler操作系统、编译安装openEuler操作系统新内核以及简单的内核模块编程任务操作来： 学习掌握如何在树莓派上安装操作系统。 学习掌握如何编译操作系统内核。 了解内核模块编程。 0x02 实验过程 1 安装openEuler操作系统 1.1 下载openEu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://echqoq.github.io/my-blog/my-blog/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T05:45:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://echqoq.github.io/my-blog/my-blog/assets/images/cover2.jpg"}],["meta",{"name":"twitter:image:alt","content":"实验一 openEuler 操作系统 编译内核实验"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:tag","content":"实验报告"}],["meta",{"property":"article:modified_time","content":"2024-09-03T05:45:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实验一 openEuler 操作系统 编译内核实验\\",\\"image\\":[\\"https://echqoq.github.io/my-blog/my-blog/images/20240311105946.png\\",\\"https://echqoq.github.io/my-blog/my-blog/images/20240311110350.png\\",\\"https://echqoq.github.io/my-blog/my-blog/images/20240311212751.png\\"],\\"dateModified\\":\\"2024-09-03T05:45:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\"}]}"]]},"headers":[{"level":2,"title":"0x01 实验目的","slug":"_0x01-实验目的","link":"#_0x01-实验目的","children":[]},{"level":2,"title":"0x02 实验过程","slug":"_0x02-实验过程","link":"#_0x02-实验过程","children":[{"level":3,"title":"1 安装openEuler操作系统","slug":"_1-安装openeuler操作系统","link":"#_1-安装openeuler操作系统","children":[]},{"level":3,"title":"2 openEuler内核编译与安装","slug":"_2-openeuler内核编译与安装","link":"#_2-openeuler内核编译与安装","children":[]}]},{"level":2,"title":"0x03 任务一","slug":"_0x03-任务一","link":"#_0x03-任务一","children":[{"level":3,"title":"1 任务要求","slug":"_1-任务要求","link":"#_1-任务要求","children":[]},{"level":3,"title":"2 代码解释","slug":"_2-代码解释","link":"#_2-代码解释","children":[]}]},{"level":2,"title":"0x04 任务二","slug":"_0x04-任务二","link":"#_0x04-任务二","children":[{"level":3,"title":"1 任务要求","slug":"_1-任务要求-1","link":"#_1-任务要求-1","children":[]},{"level":3,"title":"2 代码展示","slug":"_2-代码展示","link":"#_2-代码展示","children":[]},{"level":3,"title":"3 运行结果","slug":"_3-运行结果","link":"#_3-运行结果","children":[]}]},{"level":2,"title":"0x05 实验心得体会","slug":"_0x05-实验心得体会","link":"#_0x05-实验心得体会","children":[]}],"git":{"createdTime":1725342317000,"updatedTime":1725342317000,"contributors":[{"name":"Iwindy","email":"12398041+iwindy0@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":7.6,"words":2279},"filePathRelative":"reports/操作系统/实验一 openEuler 操作系统 编译内核实验.md","localizedDate":"2024年9月3日","excerpt":"\\n<h2>0x01 实验目的</h2>\\n<ul>\\n<li>通过安装openEuler操作系统、编译安装openEuler操作系统新内核以及简单的内核模块编程任务操作来：\\n<ul>\\n<li>学习掌握如何在树莓派上安装操作系统。</li>\\n<li>学习掌握如何编译操作系统内核。</li>\\n<li>了解内核模块编程。</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>0x02 实验过程</h2>\\n<h3>1 安装openEuler操作系统</h3>\\n<h4>1.1 下载openEuler 22.03 LTS SP3树莓派版本</h4>\\n<ul>\\n<li>登录openEuler Repo网站\\n<ul>\\n<li><a href=\\"https://repo.openeuler.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">repo.openeuler.org</a></li>\\n</ul>\\n</li>\\n<li>找到对应版本的镜像，将openEuler-22.03-LTS-SP3-raspi-aarch64.img.xz下载到本地</li>\\n</ul>","autoDesc":true}');export{h as comp,m as data};
